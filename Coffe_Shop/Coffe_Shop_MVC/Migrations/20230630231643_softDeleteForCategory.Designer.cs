// <auto-generated />
using System;
using Coffe_Shop_MVC.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Coffe_Shop_MVC.Migrations
{
    [DbContext(typeof(CoffeContext))]
    [Migration("20230630231643_softDeleteForCategory")]
    partial class softDeleteForCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Coffe_Shop_MVC.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Coffe_Shop_MVC.Models.Cheque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Cheque_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cheque_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cheque_Value")
                        .HasColumnType("int");

                    b.Property<int>("Table_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Table_Id");

                    b.ToTable("Cheques");
                });

            modelBuilder.Entity("Coffe_Shop_MVC.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Coffe_Shop_MVC.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cheque_Id")
                        .HasColumnType("int");

                    b.Property<string>("Order_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Ordered_At")
                        .HasColumnType("datetime2");

                    b.Property<int>("Table_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cheque_Id")
                        .IsUnique();

                    b.HasIndex("Table_Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Coffe_Shop_MVC.Models.Order_Item", b =>
                {
                    b.Property<int>("Order_Id")
                        .HasColumnType("int");

                    b.Property<int>("Item_Id")
                        .HasColumnType("int");

                    b.HasKey("Order_Id", "Item_Id");

                    b.HasIndex("Item_Id");

                    b.ToTable("Order_Items");
                });

            modelBuilder.Entity("Coffe_Shop_MVC.Models.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Coffe_Shop_MVC.Models.Cheque", b =>
                {
                    b.HasOne("Coffe_Shop_MVC.Models.Table", "Table")
                        .WithMany("Cheques")
                        .HasForeignKey("Table_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Coffe_Shop_MVC.Models.Item", b =>
                {
                    b.HasOne("Coffe_Shop_MVC.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Coffe_Shop_MVC.Models.Order", b =>
                {
                    b.HasOne("Coffe_Shop_MVC.Models.Cheque", "Cheque")
                        .WithOne("Order")
                        .HasForeignKey("Coffe_Shop_MVC.Models.Order", "Cheque_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coffe_Shop_MVC.Models.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("Table_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cheque");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Coffe_Shop_MVC.Models.Order_Item", b =>
                {
                    b.HasOne("Coffe_Shop_MVC.Models.Item", "Item")
                        .WithMany("Order_Items")
                        .HasForeignKey("Item_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coffe_Shop_MVC.Models.Order", "Order")
                        .WithMany("Order_Items")
                        .HasForeignKey("Order_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Coffe_Shop_MVC.Models.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Coffe_Shop_MVC.Models.Cheque", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("Coffe_Shop_MVC.Models.Item", b =>
                {
                    b.Navigation("Order_Items");
                });

            modelBuilder.Entity("Coffe_Shop_MVC.Models.Order", b =>
                {
                    b.Navigation("Order_Items");
                });

            modelBuilder.Entity("Coffe_Shop_MVC.Models.Table", b =>
                {
                    b.Navigation("Cheques");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
